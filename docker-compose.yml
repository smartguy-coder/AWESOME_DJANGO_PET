version: '3.8'

services:
  documentation:
    image: squidfunk/mkdocs-material:latest
    container_name: mkdocs
    hostname: mkdocs
    command: serve --dev-addr=0.0.0.0:8010 --watch-theme
    restart: unless-stopped
    ports:
      - "8010:8010"
    volumes:
      - ./documentation:/docs:ro
    stdin_open: true
    tty: true

  postgres_database:
    image: postgres:15
    container_name: postgres_database
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-entrypoint:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]  # pg_isready - is a postgres util
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - main_network
      - postgres

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:8.4
    env_file: .env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

  web-app:
    build:
      dockerfile: ./auto_app/Dockerfile
      context: .
    container_name: web-app
    restart: always
    env_file: .env
    volumes:
      - ./auto_app:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres_database
#    command: sh -c "gunicorn --bind 0.0.0.0:8000 settings.wsgi:application"  # no static
#     or
    command: sh -c "python manage.py runserver 0.0.0.0:8000" # for development with static
    networks:
      - main_network

networks:
  main_network:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  postgres-data:
    external: false
  pgadmin-data:

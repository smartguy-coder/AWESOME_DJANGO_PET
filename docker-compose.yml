version: '3.8'

services:
  documentation:
    image: squidfunk/mkdocs-material:latest
    container_name: mkdocs
    hostname: mkdocs
    command: serve --dev-addr=0.0.0.0:8010 --watch-theme
    restart: unless-stopped
    ports:
      - "8010:8010"
    volumes:
      - ./documentation:/docs:ro
    stdin_open: true
    tty: true

  postgres_database:
    image: postgres:15
    container_name: postgres_database
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-entrypoint:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]  # pg_isready - is a postgres util
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - main_network
      - postgres_network

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:8.4
    env_file: .env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres_network
    depends_on:
      - postgres_database

  web-app:
    build:
      dockerfile: ./auto_app/Dockerfile
      context: .
    container_name: web-app
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8000/admin/ || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env
    volumes:
      - ./auto_app:/app
      - static_volume:/app/static
    ports:
      - "8000:8000"
    depends_on:
      - postgres_database
      - redis
    command: sh -c "gunicorn --bind 0.0.0.0:8000 settings.wsgi:application  --reload -w 4 --log-level info"
#     or
#    command: sh -c "python manage.py runserver 0.0.0.0:8000"
    networks:
      - main_network
      - redis_network
      - postgres_network

  nginx:
    image: nginx:alpine
    container_name: nginx-service
    restart: always
    ports:
      - '80:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/static
    depends_on:
      - web-app
    networks:
      - main_network

  redis:
    image: redis:7.0.5-alpine
    container_name: redis
    restart: unless-stopped
    env_file: .env
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data   #  redis side we can see by command "CONFIG get dir" in cli
#      - ./redis_data/redis.conf:/usr/local/etc/redis/redis.conf  # if we will use it in future
    command: [ "redis-server", "--appendonly", "no", "--maxmemory", "100mb", "--maxmemory-policy", "allkeys-lru" ]
    healthcheck:
      test: ['CMD', "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    links:
      - redis-commander
      - redis-insight
    networks:
      - main_network
      - redis_network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    env_file: .env
    ports:
      - "8081:8081"
    networks:
      - redis_network

  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redis-insight:/data
    networks:
      - redis_network

networks:
  main_network:
    driver: bridge
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  postgres-data:
    external: false
  pgadmin-data:
  static_volume:
  redis-insight:
